---------------------------------------------------------------------------------------------------
1.  /proc目录
---------------------------------------------------------------------------------------------------
    Linux 内核提供了一种通过 /proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。
proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。
    用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。
 由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。
 下面列出的这些文件或子文件夹，并不是都是在你的系统中存在，这取决于你的内核配置和装载的模块。
 另外，在/proc下还有三个很重要的目录：net，scsi和sys。
 Sys目录是可写的，可以通过它来访问或修改内核的参数，
 而net和scsi则依赖于内核配置。
 例如，如果系统不支持scsi，则scsi 目录不存在。
    除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。
系统中当前运行的每一个进程都有对应的一个目录在/proc下，以进程的 PID号为目录名，它们是读取进程信息的接口。
而self目录则是读取进程本身的信息接口，是一个link。

---------------------------------------------------------------------------------------------------
2.  子文件或子文件夹
---------------------------------------------------------------------------------------------------
    /proc/buddyinfo         每个内存区中的每个order有多少块可用，和内存碎片问题有关
    /proc/cmdline           启动时传递给kernel的参数信息
    /proc/cpuinfo           cpu的信息
    /proc/crypto            内核使用的所有已安装的加密密码及细节
    /proc/devices           已经加载的设备并分类
    /proc/dma               已注册使用的ISA DMA频道列表
    /proc/execdomains       Linux内核当前支持的execution domains
    /proc/fb                帧缓冲设备列表，包括数量和控制它的驱动
    /proc/filesystems       内核当前支持的文件系统类型
    /proc/interrupts        x86架构中的每个IRQ中断数
    /proc/iomem             每个物理设备当前在系统内存中的映射
    /proc/ioports           一个设备的输入输出所使用的注册端口范围
    /proc/kcore             代表系统的物理内存，存储为核心文件格式，里边显示的是字节数，等于RAM大小加上4kb
    /proc/kmsg              记录内核生成的信息，可以通过/sbin/klogd或/bin/dmesg来处理
    /proc/loadavg           根据过去一段时间内CPU和IO的状态得出的负载状态，与uptime命令有关
    /proc/locks             内核锁住的文件列表
    /proc/mdstat            多硬盘，RAID配置信息(md=multiple disks)
    /proc/meminfo           RAM使用的相关信息
    /proc/misc              其他的主要设备(设备号为10)上注册的驱动
    /proc/modules           所有加载到内核的模块列表
    /proc/mounts            系统中使用的所有挂载
    /proc/mtrr              系统使用的Memory Type Range Registers (MTRRs)
    /proc/partitions        分区中的块分配信息
    /proc/pci               系统中的PCI设备列表
    /proc/slabinfo          系统中所有活动的 slab 缓存信息
    /proc/stat              所有的CPU活动信息
    /proc/sysrq-trigger     使用echo命令来写这个文件的时候，远程root用户可以执行大多数的系统请求关键命令，就好像在本地终端执行一样。
                            要写入这个文件，需要把/proc/sys/kernel/sysrq不能设置为0。这个文件对root也是不可读的
    /proc/uptime            系统已经运行了多久
    /proc/swaps             交换空间的使用情况
    /proc/version           Linux内核版本和gcc版本
    /proc/bus               系统总线(Bus)信息，例如pci/usb等
    /proc/driver            驱动信息
    /proc/fs                文件系统信息
    /proc/ide               ide设备信息
    /proc/irq               中断请求设备信息
    /proc/net               网卡设备信息
    /proc/scsi              scsi设备信息
    /proc/tty               tty设备信息
    /proc/net/dev           显示网络适配器及统计信息
    /proc/vmstat            虚拟内存统计信息
    /proc/vmcore            内核panic时的内存映像
    /proc/diskstats         取得磁盘信息
    /proc/schedstat         kernel调度器的统计信息
    /proc/zoneinfo          显示内存空间的统计信息，对分析虚拟内存行为很有用
    以下是/proc目录中进程N的信息
    /proc/N pid             为N的进程信息
    /proc/N/cmdline         进程启动命令
    /proc/N/cwd             链接到进程当前工作目录
    /proc/N/environ         进程环境变量列表
    /proc/N/exe             链接到进程的执行命令文件
    /proc/N/fd              包含进程相关的所有的文件描述符
    /proc/N/maps            与进程相关的内存映射信息
    /proc/N/mem             指代进程持有的内存，不可读
    /proc/N/root            链接到进程的根目录
    /proc/N/stat            进程的状态
    /proc/N/statm           进程使用的内存的状态
    /proc/N/status          进程状态信息，比stat/statm更具可读性
    /proc/self              链接到当前正在运行的进程

---------------------------------------------------------------------------------------------------
内容摘要：Linux系统上的/proc目录是一种文件系统，即proc文件系统。
---------------------------------------------------------------------------------------------------
    Linux系统上的/proc目录是一种文件系统，即proc文件系统。与其它常见的文件系统不同的是，/proc是一种伪文件系统（也即虚拟文件系统），
存储的是当前内核运行状态的一系列特殊文件，用户可以通过这些文件查看有关系统硬件及当前正在运行进程的信息，
甚至可以通过更改其中某些文件来改变内核的运行状态。
    基于/proc文件系统如上所述的特殊性，其内的文件也常被称作虚拟文件，并具有一些独特的特点。
例如，其中有些文件虽然使用查看命令查看时会返回大量信息，但文件本身的大小却会显示为0字节。
此外，这些特殊文件中大多数文件的时间及日期属性通常为当前系统时间和日期，这跟它们随时会被刷新（存储于RAM中）有关。
    为了查看及使用上的方便，这些文件通常会按照相关性进行分类存储于不同的目录甚至子目录中，
如/proc/scsi目录中存储的就是当前系统上所有SCSI设备的相关信息，/proc/N中存储的则是系统当前正在运行的进程的相关信息，
其中N为正在运行的进程（可以想象得到，在某进程结束后其相关目录则会消失）。
    大多数虚拟文件可以使用文件查看命令如cat、more或者less进行查看，有些文件信息表述的内容可以一目了然，
但也有文件的信息却不怎么具有可读性。不过，这些可读性较差的文件在使用一些命令如apm、free、lspci或top查看时却可以有着不错的表现。

---------------------------------------------------------------------------------------------------
/proc/1
---------------------------------------------------------------------------------------------------
├── attr
│   ├── current
│   ├── exec
│   ├── fscreate
│   ├── keycreate
│   ├── prev
│   └── sockcreate
├── autogroup
├── auxv
├── cgroup
├── clear_refs
├── cmdline                                             启动当前进程的完整命令，但僵尸进程目录中的此文件不包含任何信息；
├── comm
├── coredump_filter
├── cpuset
├── cwd -> [Error reading symbolic link information]    指向当前进程运行目录的一个符号链接；
├── environ                                             当前进程的环境变量列表，彼此间用空字符（NULL）隔开；
                                                        变量用大写字母表示，其值用小写字母表示；
├── exe -> [Error reading symbolic link information]    指向启动当前进程的可执行文件（完整路径）的符号链接，
                                                        通过/proc/N/exe可以启动当前进程的一个拷贝； 
├── fd [error opening dir]                              这是个目录，包含当前进程打开的每一个文件的文件描述符（file descriptor），
                                                        这些文件描述符是指向实际文件的一个符号链接； 
├── fdinfo [error opening dir]
├── io
├── latency
├── limits                                              当前进程所使用的每一个受限资源的软限制、硬限制和管理单元
                                                        此文件仅可由实际启动当前进程的UID用户读取；（2.6.24以后的内核版本支持此功能）
├── loginuid
├── map_files [error opening dir]
├── maps                                                当前进程关联到的每个可执行文件和库文件在内存中的映射区域及其访问权限所组成的列表 
├── mem                                                 当前进程所占用的内存空间，由open、read和lseek等系统调用使用，不能被用户读取
├── mountinfo
├── mounts
├── mountstats
├── net
│   ├── anycast6
│   ├── arp
│   ├── bnep
│   ├── connector
│   ├── dev
│   ├── dev_mcast
│   ├── dev_snmp6
│   │   ├── eth0
│   │   ├── lo
│   │   └── wlan0
│   ├── fib_trie
│   ├── fib_triestat
│   ├── hci
│   ├── icmp
│   ├── if_inet6
│   ├── igmp
│   ├── igmp6
│   ├── ip6_flowlabel
│   ├── ip6_mr_cache
│   ├── ip6_mr_vif
│   ├── ip_mr_cache
│   ├── ip_mr_vif
│   ├── ipv6_route
│   ├── l2cap
│   ├── mcfilter
│   ├── mcfilter6
│   ├── netfilter
│   │   └── nf_log
│   ├── netlink
│   ├── netstat
│   ├── packet
│   ├── pnp
│   ├── protocols
│   ├── psched
│   ├── ptype
│   ├── raw
│   ├── raw6
│   ├── rfcomm
│   ├── route
│   ├── rt6_stats
│   ├── rt_acct
│   ├── rt_cache
│   ├── sco
│   ├── snmp
│   ├── snmp6
│   ├── sockstat
│   ├── sockstat6
│   ├── softnet_stat
│   ├── stat
│   │   ├── arp_cache
│   │   ├── ndisc_cache
│   │   └── rt_cache
│   ├── tcp
│   ├── tcp6
│   ├── udp
│   ├── udp6
│   ├── udplite
│   ├── udplite6
│   ├── unix
│   └── wireless
├── ns [error opening dir]
├── numa_maps
├── oom_adj
├── oom_score
├── oom_score_adj
├── pagemap
├── personality
├── root -> [Error reading symbolic link information]       指向当前进程运行根目录的符号链接；在Unix和Linux系统上，
                                                            通常采用chroot命令使每个进程运行于独立的根目录；
├── sched
├── schedstat
├── sessionid
├── smaps
├── stack
├── stat                                                    当前进程的状态信息，包含一系统格式化后的数据列，可读性差，通常由ps命令使用 
├── statm                                                   当前进程占用内存的状态信息，通常以“页面”（page）表示
├── status                                                  与stat所提供信息类似，但可读性较好，如下所示，每行表示一个属性信息
                                                            其详细介绍请参见 proc的man手册页
├── syscall
├── task                                                    目录文件，包含由当前进程所运行的每一个线程的相关信息，
                                                            每个线程的相关信息文件均保存在一个由线程号（tid）命名的目录中，
                                                            这类似于其内容类似于每个进程目录中的内容
│   └── 1
│       ├── attr
│       │   ├── current
│       │   ├── exec
│       │   ├── fscreate
│       │   ├── keycreate
│       │   ├── prev
│       │   └── sockcreate
│       ├── auxv
│       ├── cgroup
│       ├── children
│       ├── clear_refs
│       ├── cmdline
│       ├── comm
│       ├── cpuset
│       ├── cwd -> [Error reading symbolic link information]
│       ├── environ
│       ├── exe -> [Error reading symbolic link information]
│       ├── fd [error opening dir]
│       ├── fdinfo [error opening dir]
│       ├── io
│       ├── latency
│       ├── limits
│       ├── loginuid
│       ├── maps
│       ├── mem
│       ├── mountinfo
│       ├── mounts
│       ├── ns [error opening dir]
│       ├── numa_maps
│       ├── oom_adj
│       ├── oom_score
│       ├── oom_score_adj
│       ├── pagemap
│       ├── personality
│       ├── root -> [Error reading symbolic link information]
│       ├── sched
│       ├── schedstat
│       ├── sessionid
│       ├── smaps
│       ├── stack
│       ├── stat
│       ├── statm
│       ├── status
│       ├── syscall
│       └── wchan
└── wchan

---------------------------------------------------------------------------------------------------
proc文件系统总览 
---------------------------------------------------------------------------------------------------
    在类Unix系统中体现了一种良好的抽象哲学，就是几乎所有的数据实体都被抽象成一个统一的接口--文件来看待，
这样我们就可以用一些简单的基本工具完成大量复杂的操作。在Linux中存在着一类特殊的伪文件系统，用于使用与文件接口统一的操作来完成各种功能，
例如ptyfs、devfs、sysfs和procfs。而procfs就是其中应用最广泛的一种伪文件系统。 
    procfs是Linux内核信息的抽象文件接口，大量内核中的信息以及可调参数都被作为常规文件映射到一个目录树中，
这样我们就可以简单直接的通过echo或cat这样的文件操作命令对系统信息进行查取和调整了。
同时procfs也提供了一个接口，使得我们自己的内核模块或用户态程序可以通过procfs进行参数的传递。
在当今的Linux系统中，大量的系统工具也通过procfs获取内核参数，例如ps、lspci等等，没有procfs它们将可能不能正常工作。 
    proc为一个内核数据结构接口，用户空间和内核空间可以通信，与普通文件不同的是，这些虚拟文件的内容都是动态创建的。
proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。
用户和应用程序可以通过 proc得到系统的信息，并可以改变内核的某些参数。proc 文件系统可以被用于收集有用的关于系统和运行中的内核的信息。
