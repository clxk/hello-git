<todo name="housework">
    <item priority="high">Clean the house.</item>
    <item priority="medium">Wash the dishes.</item>
    <item priority="medium">Buy more soap.</item>
</todo>


int add(int arg1， int arg2){ return arg1+arg2; }
<define-function return-type="int" name="add">
    <arguments>
        <argument type="int">arg1</argument>
        <argument type="int">arg2</argument>
    </arguments>
    <body>
        <return>
        <add value1="arg1" value2="arg2" />
        </return>
    </body>
</define>


(copy (todir "../new/dir")(fileset (dir "src_dir")))

(task (name "Test"))
(echo (message "Hello World!"))
(Test)

(task,(name,"test"),(echo,(message,"Hello World!")))    //嵌套表vs树

宏-制造程序的程序，元编程.


set(test, 5)            // 符号test的值为5
set(=, 5)               // 符号=的值为5
set(test, "hello")      // 符号test的值为字符串"hello"
set(test, =)            // 此时符号=的值为5, 所以test的也为5
set(*, "hello")         // 符号*的值为"hello

set(temp, *)    // 把*的值, 也就是乘法函数, 赋值给temp
set(*, 3)       // 把3赋予*
*(3,4)          // 错误的表达式, *不再是乘法, 而是数值3
temp(3,4)       // temp是乘法函数, 所以此表达式的值为3乘4等于12
set(*, temp)    // 再次把乘法函数赋予*
*(3,4)          // 3乘4等于12

set(+, -)       // 减号(-)是内置的减法函数
+(5, 4)         // 加号(+)现在是代表减法函数, 结果是5减4等于1

fn [a]
{
        return *(a, 2);
}
set(times-two， fn [a] {return *(a， 2)})

()                      ; 空表  
(1)                     ; 含一个元素的表  
(1 "test")              ; 两元素表, 一个元素是整数1, 另一个是字符串  
(test "hello")          ; 两元素表, 一个元素是符号, 另一个是字符串  
(test (1 2) "hello")    ; 三元素表, 一个符号test, 一个含有两个元素1和2的  
                        ; 表, 最后一个元素是字符串

Lisp执行表的顺序是这样的，表的第一个元素当作函数，其他元素当作函数的参数。
如果其中某个参数也是表，那就按照同样的原则对这个表求值，结果再传递给最初的函数作为参数。
这就是基本原则。

(* 3 4)                 ; 相当于前面列举过的伪码*(3,4), 即计算3乘4 
(times-two 5)           ; 返回10, times-two按照前面的定义是求参数的2倍  
(3 4)                   ; 错误, 3不是函数  
(time-two)              ; 错误, times-two要求一个参数  
(times-two 3 4)         ; 错误, times-two只要求一个参数  
(set + -)               ; 把减法函数赋予符号+  
(+ 5 4)                 ; 依据上一句的结果, 此时+表示减法, 所以返回1 
(* 3 (+ 2 2))           ; 2+2的结果是4, 再乘3, 结果是12 

(set test '(1 2))       ; test的值为两元素表  
(set test (1 2))        ; 错误, 1不是函数  
(set test '(* 3 4))     ; test的值是三元素表, 三个元素分别是*, 3, 4

(head '(* 3 4))         ; 返回符号*  
(tail '(* 3 4))         ; 返回表(3 4)  
(head (tail '(* 3 4)))  ; 返回3 
(head test)             ; 返回*

(todo "housework" 
 (item (priority high) "Clean the house")  
 (item (priority medium) "Wash the dishes")  
 (item (priority medium) "Buy more soap"))

(function-name arg1 arg2 arg3)

(defmacro triple (x)  
 `(+ ~x ~x ~x))

(defmacro item (priority note)  
 `(block  
     (print stdout tab "Prority: " ~(head (tail priority)) endl)  
     (print stdout tab "Note: " ~note endl endl))) 

===================================================================================================
quote,atom,eq,car,cdr,cons,和 cond.
===================================================================================================
(quote x ) 返回x .为了可读性我们把(quote x )简记 为'x .

(atom x )返回原子t如果x 的值是一个原子或是空表,否则返回(). 在Lisp中我们按惯例用原子t表示真, 而用空表表示假.

(eq x y )返回t如果x 和y 的值是同一个原子或都是空表, 否则返回().

(car x )期望x 的值是一个表并且返回x 的第一个元素. 

(cdr x )期望x 的值是一个表并且返回x 的第一个元素之后的所有元素. 

(cons x y )期望y 的值是一个表并且返回一个新表,它的第一个元素是x 的值, 后面跟着y 的值的各个元素

(cond ( ... ) ...( ... )) 的求值规则如下. p 表达式依次求值直到有一个返回t. 
如果能找到这样的p 表达式,相应的e 表达式的值作为整个cond表达式的返回值.


===================================================================================================
语法和语义
===================================================================================================
字符流 --语法分析器--> 语元 --解析器--> 抽象语法树 --求值器--> (解释执行|翻译成机器码)

读取器(将文本转化成Lisp对象) + 求值器(用这些对象来实现语言的语义)
Lisp对象 <=> S-表达式 <=> 抽象语法树(并非所有合法的S-表达式都是合法的Lisp形式)
读取器所能够理解的 -- S-表达式
求值器所能够理解的 -- Lisp表达式

S-表达式的基本元素是列表(list)和原子(atom)
    数字:
        123         ;整数
        3/7         ;分数
        1.0         ;默认精度的浮点数
        1.0e0       ;同一个浮点数的另一种写法
        1.0d0       ;双精度浮点数
        1.0e-4      ;等价于万分之一的浮点数
        +42         ;整数42
        -42         ;负42
        -1/4        ;负分数
        -2/8        ;负分数
        246/2       ;整数123的另一种写法
    字符串
        "foo"       ;含有f、o、和o的字符串
        "fo\o"      ;同一个字符串
        "fo\\o"     ;含有f o \ o的字符串
        "fo\"o"     ;含有f o " o的字符串
    名字
        Lisp中所使用的名字均由称为符号的对象所表示,读取器对于一个给定名的用途毫不知情——
        无论其究竟用作变量名\函数名还是其他什么东西.
        读取器只是读取字符序列并构造出此名所代表的对象.

函数调用形式+宏形式+特殊形式
    函数调用形式
        (function-name arguments*)
    特殊形式
        (if x (format t "yes") (format t "no"))
        当列表的第一个元素是一个由特殊操作符所命名的符号时,表达式的其余部分将按照该操作符的规则进行求值
        (if test-form then-form [else-form])
        (quote (+ 1 2))返回列表(+ 1 2)
        ('(+ 1 2))
    宏
        宏是一个以S-表达式为其参数的函数,返回一个Lisp形式,然后对其求值并用该值取代宏形式.
        阶段1:  宏形式的元素不经求值即被传递到宏函数里
        阶段2:  宏函数所返回的形式(展开式)按照正常的求值规则进行求值

真、假和等价
    符号NIL是唯一的假值,其他所有的都是真值.符号t时标准的真值.
    NIL是唯一一个既是原子又是列表的对象.除了用来表示假以外,还用来表示空列表.
    因此NIL等价于()
    NIL是一个以符号NIL作为其值的常值变量名,所以表达式nil,(),'nil,'()的求值结果是相同的.
    t和't的求值结果也完全相同:符号T
    "完全相同" <=> 等价
        =       用来比较数字
        CHAR=   用来比较字符
        EQ EQL EQUAL EQUALP(通用等价谓词)
        EQ用来测试"对象标志",只有两个对象相同时才是EQ等价的.(eq x x)可能为真也可能为假.
        EQL可以保证当相同类型的两个对象表示相同的数字或者字符值时,他们是等价的.因此(eql 1 1)能确保是真，而
            (eql 1 1.0)则确保是假，因为整数值1和浮点数1.0是不同类型的对象.

