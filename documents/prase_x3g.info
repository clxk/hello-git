if ((command_buffer.getLength() > 0)){
    Motherboard::getBoard().resetUserInputTimeout();

    uint8_t command = command_buffer[0];

    //If we're running acceleration, we want to populate the pipeline buffer,
    //but we also need to sync (wait for the pipeline buffer to clear) on certain
    //commands, we do that here
    //If we're not pipeline'able command, then we sync here,
    //by waiting for the pipeline buffer to empty before continuing
    if ((command != HOST_CMD_QUEUE_POINT_EXT) &&
            (command != HOST_CMD_QUEUE_POINT_NEW) &&
            (command != HOST_CMD_QUEUE_POINT_NEW_EXT ) &&
            (command != HOST_CMD_ENABLE_AXES ) &&
            (command != HOST_CMD_CHANGE_TOOL ) &&
            (command != HOST_CMD_SET_POSITION_EXT) &&
            (command != HOST_CMD_SET_ACCELERATION_TOGGLE) &&
            (command != HOST_CMD_RECALL_HOME_POSITION) &&
            (command != HOST_CMD_FIND_AXES_MINIMUM) &&
            (command != HOST_CMD_FIND_AXES_MAXIMUM) &&
            (command != HOST_CMD_TOOL_COMMAND) &&
            (command != HOST_CMD_PAUSE_FOR_BUTTON )) {
        if ( ! st_empty() )     return;
    }

    if (command == HOST_CMD_QUEUE_POINT_EXT || command == HOST_CMD_QUEUE_POINT_NEW ||
            command == HOST_CMD_QUEUE_POINT_NEW_EXT ) {
        handleMovementCommand(command);
    }  else if (command == HOST_CMD_CHANGE_TOOL) {
        if (command_buffer.getLength() >= 2) {
#ifdef INSERT_SWAP_ROUTINE
            pop8(); // remove the command code
            steppers::pushToolIndex(pop8());
            insert_mode = 0x01;
#else
            pop8(); // remove the command code
            currentToolIndex = pop8();
            line_number++;

            steppers::changeToolIndex(currentToolIndex);
#endif
        }
    } else if (command == HOST_CMD_ENABLE_AXES) {
        if (command_buffer.getLength() >= 2) {
            pop8(); // remove the command code
            uint8_t axes = pop8();
            line_number++;

#ifdef DITTO_PRINT
            if ( dittoPrinting ) {
                if ( currentToolIndex == 0 ) {
                    //Set B to be the same as A
                    axes &= ~(_BV(B_AXIS));
                    if ( axes & _BV(A_AXIS) ) axes |= _BV(B_AXIS);
                } else {
                    //Set A to be the same as B
                    axes &= ~(_BV(A_AXIS));
                    if ( axes & _BV(B_AXIS) ) axes |= _BV(A_AXIS);
                }
            }
#endif
            steppers::enableAxes(axes, (axes & 0x80) != 0);
        }
    } else if (command == HOST_CMD_SET_POSITION_EXT) {
        // check for completion
        if (command_buffer.getLength() >= 21) {
            pop8(); // remove the command code
            int32_t x = pop32();
            int32_t y = pop32();
            int32_t z = pop32();
            int32_t a = pop32();
            int32_t b = pop32();

#ifdef DITTO_PRINT
            if ( dittoPrinting ) {
                if ( currentToolIndex == 0 ) b = a;
                else    a = b;
            }
#endif

            lastFilamentPosition[0] = a;
            lastFilamentPosition[1] = b;
            line_number++;

            steppers::definePosition(Point(x,y,z,a,b), false);
        }
    } else if (command == HOST_CMD_DELAY) {
        if (command_buffer.getLength() >= 5) {
            mode = DELAY;
            pop8(); // remove the command code
            // parameter is in milliseconds; timeouts need microseconds
            uint32_t microseconds = pop32() * 1000L;
            line_number++;

            delay_timeout.start(microseconds);
        }
    } else if (command == HOST_CMD_PAUSE_FOR_BUTTON) {
        if (command_buffer.getLength() >= 5) {
            pop8(); // remove the command code
            button_mask = pop8();
            uint16_t timeout_seconds = pop16();
            button_timeout_behavior = pop8();
            line_number++;

            if (timeout_seconds != 0) {
                button_wait_timeout.start(timeout_seconds * 1000L * 1000L);
            } else {
                button_wait_timeout = Timeout();
            }
            // set button wait via interface board
            Motherboard::interfaceBlinkOn();
            InterfaceBoard& ib = Motherboard::getBoard().getInterfaceBoard();
            ib.waitForButton(button_mask);
            BOARD_STATUS_SET(Motherboard::STATUS_WAITING_FOR_BUTTON);
            mode = WAIT_ON_BUTTON;
        }
    } else if (command == HOST_CMD_DISPLAY_MESSAGE) {
#ifdef MINI_DGUS_ONLY
#else
        MessageScreen* scr = Motherboard::getBoard().getMessageScreen();
        if (command_buffer.getLength() >= 6) {
            pop8(); // remove the command code
            uint8_t options = pop8();
            uint8_t xpos = pop8();
            uint8_t ypos = pop8();
            uint8_t timeout_seconds = pop8();
            line_number++;

            // check message clear bit
            if ( (options & (1 << 0)) == 0 ) { scr->clearMessage(); }
            // set position and add message
            scr->setXY(xpos,ypos);
            scr->addMessage(command_buffer);

            // push message screen if the full message has been recieved
            if((options & (1 << 1))){
                InterfaceBoard& ib = Motherboard::getBoard().getInterfaceBoard();
                if (ib.getCurrentScreen() != scr) {
                    ib.pushScreen(scr);
                } else {
                    scr->refreshScreen();
                }
                // set message timeout if not a buttonWait call
                if ((timeout_seconds != 0) && (!(options & (1 <<2)))) {
                    scr->setTimeout(timeout_seconds);//, true);
                }
                if (options & (1 << 2)) { // button wait bit --> start button wait
                    if (timeout_seconds != 0) {
                        button_wait_timeout.start(timeout_seconds * 1000L * 1000L);
                    } else {
                        button_wait_timeout = Timeout();
                    }
                    button_mask = (1 << ButtonArray::CENTER);  // center button
                    button_timeout_behavior &= (1 << BUTTON_CLEAR_SCREEN);
                    Motherboard::interfaceBlinkOn();
                    InterfaceBoard& ib = Motherboard::getBoard().getInterfaceBoard();
                    ib.waitForButton(button_mask);
                    BOARD_STATUS_SET(Motherboard::STATUS_WAITING_FOR_BUTTON);
                    mode = WAIT_ON_BUTTON;
                }
            }
        }
#endif
    } else if (command == HOST_CMD_FIND_AXES_MINIMUM ||
            command == HOST_CMD_FIND_AXES_MAXIMUM) {
        if (command_buffer.getLength() >= 8) {
            pop8(); // remove the command
            uint8_t flags = pop8();
            uint32_t feedrate = pop32(); // feedrate in us per step
            uint16_t timeout_s = pop16();
            line_number++;

            //bool direction = command == HOST_CMD_FIND_AXES_MAXIMUM;
            mode = HOMING;
            homing_timeout.start(timeout_s * 1000L * 1000L);
            steppers::startHoming(command==HOST_CMD_FIND_AXES_MAXIMUM,
                    flags,
                    feedrate);
        }
    } else if (command == HOST_CMD_WAIT_FOR_TOOL) {
        if (command_buffer.getLength() >= 6) {
#ifdef DEBUG_NO_HEAT_NO_WAIT
            mode = READY;
#else
            mode = WAIT_ON_TOOL;
#endif
#ifdef PSTOP_SUPPORT
            // Assume that by now coordinates are set
            pstop_okay = true;
#endif
            pop8();
            currentToolIndex = pop8();
            pop16(); //uint16_t toolPingDelay
            uint16_t toolTimeout = (uint16_t)pop16();
            line_number++;
            // if we re-add handling of toolTimeout, we need to make sure
            // that values that overflow our counter will not be passed)
            tool_wait_timeout.start(toolTimeout*1000000L);
        }
    } else if (command == HOST_CMD_WAIT_FOR_PLATFORM) {
        // FIXME: Almost equivalent to WAIT_FOR_TOOL
        if (command_buffer.getLength() >= 6) {
#ifdef DEBUG_NO_HEAT_NO_WAIT
            mode = READY;
#else
            mode = WAIT_ON_PLATFORM;
#endif
#ifdef PSTOP_SUPPORT
            // Assume that by now coordinates are set
            pstop_okay = true;
#endif
            pop8();
            pop8(); //uint8_t currentToolIndex
            pop16(); //uint16_t toolPingDelay
            uint16_t toolTimeout = (uint16_t)pop16();
            line_number++;
            // if we re-add handling of toolTimeout, we need to make sure
            // that values that overflow our counter will not be passed)
            tool_wait_timeout.start(toolTimeout*1000000L);
        }
    } else if (command == HOST_CMD_STORE_HOME_POSITION) {

        // check for completion
        if (command_buffer.getLength() >= 2) {
            pop8();
            uint8_t axes = pop8();
            line_number++;

            // Go through each axis, and if that axis is specified, read it's value,
            // then record it to the eeprom.
            for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
                if ( axes & (1 << i) ) {
                    uint16_t offset = eeprom_offsets::AXIS_HOME_POSITIONS_STEPS + 4*i;
                    uint32_t position = steppers::getPlannerPosition()[i];
                    cli();
                    eeprom_write_block(&position, (void*) offset, 4);
                    sei();
                }
            }
        }
    } else if (command == HOST_CMD_RECALL_HOME_POSITION) {
        // check for completion
        if (command_buffer.getLength() >= 2) {
            pop8();
            uint8_t axes = pop8();
            line_number++;

            Point newPoint = steppers::getPlannerPosition();

            for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
                if ( axes & (1 << i) ) {
                    uint16_t offset = eeprom_offsets::AXIS_HOME_POSITIONS_STEPS + 4*i;
                    cli();
                    eeprom_read_block(&(newPoint[i]), (void*) offset, 4);
                    sei();
                }
            }

            lastFilamentPosition[0] = newPoint[3];
            lastFilamentPosition[1] = newPoint[4];

            steppers::definePosition(newPoint, true);
        }

    }else if (command == HOST_CMD_SET_POT_VALUE){
        if (command_buffer.getLength() >= 3) {
            pop8(); // remove the command code
            uint8_t axis = pop8();
            uint8_t value = pop8();
            line_number++;
            steppers::setAxisPotValue(axis, value);
        }
    }else if (command == HOST_CMD_SET_RGB_LED){
        if (command_buffer.getLength() >= 6) {
            pop8(); // remove the command code

            uint8_t red = pop8();
            uint8_t green = pop8();
            uint8_t blue = pop8();
            uint8_t blink_rate = pop8();

            pop8(); //uint8_t effect
            line_number++;
            RGB_LED::setLEDBlink(blink_rate);
            RGB_LED::setCustomColor(red, green, blue);

        }
    }else if (command == HOST_CMD_SET_BEEP){
        if (command_buffer.getLength() >= 6) {
            pop8(); // remove the command code
            uint16_t frequency= pop16();
            uint16_t beep_length = pop16();
            pop8(); //uint8_t effect
            line_number++;
            Piezo::setTone(frequency, beep_length);

        }
    }else if (command == HOST_CMD_TOOL_COMMAND) {
        if (command_buffer.getLength() >= 4) { // needs a payload
            uint8_t payload_length = command_buffer[3];
            if (command_buffer.getLength() >= 4U+payload_length) {
#ifdef DITTO_PRINT
                if ( dittoPrinting ) {
                    //Delete after use toggles, so that
                    //when deleteAfterUse = false, it's the 1st call of the extruder command
                    //and we copy to the other extruder.  When true, it's the 2nd call if the
                    //extruder command, and we use the tool index specified in the command
                    if ( deleteAfterUse ) deleteAfterUse = false;
                    else   deleteAfterUse = true;
                } else
#endif
                    deleteAfterUse = true;  //ELSE


                //If we're not setting a temperature, or toggling a fan, then we don't
                //"ditto print" the command, so we delete after use
                if (( command_buffer[2] != SLAVE_CMD_SET_TEMP ) &&
                        ( command_buffer[2] != SLAVE_CMD_TOGGLE_FAN ))
                    deleteAfterUse = true;

                //If we're copying this command due to ditto printing, then we need to switch
                //the extruder controller by switching toolindex to the other extruder
                int8_t overrideToolIndex = -1;
                if ( ! deleteAfterUse ) {
                    if ( command_buffer[1] == 0 ) overrideToolIndex = 1;
                    else    overrideToolIndex = 0;
                }

                processExtruderCommandPacket(overrideToolIndex);

                //Delete the packet from the buffer
                if ( deleteAfterUse ) {
                    //We start from 1 not 0, because byte 0 was already removed in the pop8
                    //above
                    for ( uint8_t i = 0; i < (4U + payload_length); i ++ )
                        pop8();

                    line_number++;
                }
            }
        }
    } else if (command == HOST_CMD_SET_BUILD_PERCENT){
        if (command_buffer.getLength() >= 3){
            pop8(); // remove the command code
            buildPercentage = pop8();
            pop8(); // uint8_t ignore; // remove the reserved byte
            line_number++;
#ifdef MODEL_REPLICATOR2
            //Set the starting time / percent on the first HOST_CMD_SET_BUILD_PERCENT
            //with a non zero value sent near the start of the build
            //We use this to calculate the build time
            if (( buildPercentage > 0 ) && ( startingBuildTimeSeconds == 0.0) && ( startingBuildTimePercentage == 0 )) {
                startingBuildTimeSeconds = host::getPrintSeconds();
                startingBuildTimePercentage = buildPercentage;
            }
            if ( buildPercentage > 0 ) {
                elapsedSecondsSinceBuildStart = host::getPrintSeconds();
            }
#endif
        }
    } else if (command == HOST_CMD_QUEUE_SONG ) //queue a song for playing
    {
        /// Error tone is 0,
        /// End tone is 1,
        /// all other tones user-defined (defaults to end-tone)
        if (command_buffer.getLength() >= 2){
            pop8(); // remove the command code
            uint8_t songId = pop8();
            line_number++;
            if(songId == 0)
                Piezo::errorTone(4);
            else if (songId == 1 )
                Piezo::playTune(TUNE_PRINT_DONE);
            else
                Piezo::errorTone(2);
        }

    } else if ( command == HOST_CMD_RESET_TO_FACTORY) {
        /// reset EEPROM settings to the factory value. Reboot bot.
        if (command_buffer.getLength() >= 2){
            pop8(); // remove the command code
            pop8(); //uint8_t options
            line_number++;
            eeprom::factoryResetEEPROM();
            Motherboard::getBoard().reset(false);
        }
    } else if ( command == HOST_CMD_BUILD_START_NOTIFICATION) {
        if (command_buffer.getLength() >= 5){
            pop8(); // remove the command code
            pop32(); //int buildSteps
            line_number++;
            host::handleBuildStartNotification(command_buffer);
        }
    } else if ( command == HOST_CMD_BUILD_END_NOTIFICATION) {
        if (command_buffer.getLength() >= 2){
            pop8(); // remove the command code
            uint8_t flags = pop8();
            line_number++;
            host::handleBuildStopNotification(flags);
        }
    } else if ( command == HOST_CMD_SET_ACCELERATION_TOGGLE) {
        if (command_buffer.getLength() >= 2){
            pop8(); // remove the command code
            line_number++;
            uint8_t status = pop8();
            steppers::setSegmentAccelState(status == 1);
        }
    } else if ( command == HOST_CMD_STREAM_VERSION ) {
        if ( command_buffer.getLength() >= 21 ) {

            pop8();// remove the command code
            // stream number
            uint8_t version_high = pop8();
            uint8_t version_low = pop8();

            //we don't check the x3g version
            //if ( (version_high *100 + version_low) != stream_version ) {
            //    Motherboard::getBoard().errorResponse(ERROR_STREAM_VERSION);
            //}
            // extra version
            pop8();
            // checksum (currently not implemented)
            pop32();
            uint16_t bot_type = pop16();
            // extra bytes
            if ( bot_type != BOT_TYPE ) Motherboard::getBoard().errorResponse(ERROR_BOT_TYPE);

            // eleven extra bytes
            pop16();
            pop32();
            pop32();
            pop8();
            line_number++;
        }
    } else if ( command == HOST_CMD_PAUSE_AT_ZPOS ) {
        if (command_buffer.getLength() >= 5){
            pop8(); // remove the command code
            line_number++;
            int32_t zPosInt32 = pop32();
            float *zPos = (float *)&zPosInt32;

            //Exclude negative zpos's and nearly zero zpos's
            if ( *zPos < 0.001 ) *zPos = 0.0;
            pauseAtZPos(stepperAxisMMToSteps(*zPos, Z_AXIS));
        }
    } else {
    }
}
